From c90ec74513e86843fd8ea8277348c6958bc80a14 Mon Sep 17 00:00:00 2001
From: fesavali <felixnzioki99@gmail.com>
Date: Mon, 25 Sep 2023 19:42:35 +0300
Subject: [PATCH] task 2 changes

---
 src/App.tsx   | 79 +++++++++++++++++++++++----------------------------
 src/Graph.tsx | 54 ++++++++++++++++++++++-------------
 2 files changed, 71 insertions(+), 62 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..7e30eb0 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -3,71 +3,64 @@ import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
 
-/**
- * State declaration for <App />
- */
 interface IState {
-  data: ServerRespond[],
+  data: ServerRespond[];
 }
 
-/**
- * The parent element of the react app.
- * It renders title, button and Graph react element.
- */
 class App extends Component<{}, IState> {
+  // Define a variable to hold the interval ID
+  private intervalId: NodeJS.Timeout | undefined;
+
   constructor(props: {}) {
     super(props);
 
     this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
       data: [],
     };
   }
 
-  /**
-   * Render Graph react component with state.data parse as property data
-   */
-  renderGraph() {
-    return (<Graph data={this.state.data}/>)
+  componentDidMount() {
+    // Start the data streaming when the component is mounted
+    this.startDataStreaming();
   }
 
-  /**
-   * Get new data from server and update the state with the new data
-   */
-  getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+  componentWillUnmount() {
+    // Stop the data streaming when the component is unmounted
+    this.stopDataStreaming();
+  }
+
+  startDataStreaming() {
+    // Use setInterval to fetch data every 100 milliseconds
+    this.intervalId = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state with the new data
+        this.setState((prevState) => ({
+          data: [...prevState.data, ...serverResponds],
+        }));
+      });
+    }, 100);
+  }
+
+  stopDataStreaming() {
+    // Clear the interval to stop data fetching when the component is unmounted
+    if (this.intervalId) {
+      clearInterval(this.intervalId);
+    }
+  }
+
+  renderGraph() {
+    return <Graph data={this.state.data} />;
   }
 
-  /**
-   * Render the App react component
-   */
   render() {
     return (
       <div className="App">
-        <header className="App-header">
-          Bank & Merge Co Task 2
-        </header>
+        <header className="App-header">Bank & Merge Co Task 2</header>
         <div className="App-content">
-          <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
-            Start Streaming Data
-          </button>
-          <div className="Graph">
-            {this.renderGraph()}
-          </div>
+          <div className="Graph">{this.renderGraph()}</div>
         </div>
       </div>
-    )
+    );
   }
 }
 
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..36d37fa 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -33,41 +33,57 @@ class Graph extends Component<IProps, {}> {
   componentDidMount() {
     // Get element to attach the table from the DOM.
     const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+  
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
       top_bid_price: 'float',
       timestamp: 'date',
     };
-
+  
     if (window.perspective && window.perspective.worker()) {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
+      // Configure the PerspectiveViewerElement separately
+      const elem: HTMLElement = document.getElementsByTagName('perspective-viewer')[0];
+
+      elem.setAttribute('row-pivots', JSON.stringify(['stock'])); // Allow pivoting rows by 'stock'.
+      elem.setAttribute('sort', JSON.stringify([['timestamp', 'desc']])); // Sort data by 'timestamp' in descending order.
+      elem.setAttribute('columns', JSON.stringify(['stock', 'top_ask_price', 'top_bid_price', 'timestamp'])); // Display only specified columns.
+      elem.setAttribute('editable', 'false'); // Disable editing cells in the table.
 
-      // Add more Perspective configurations here.
+      // Load the table into the PerspectiveViewerElement
       elem.load(this.table);
     }
   }
 
-  componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
-    if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+  componentDidUpdate(prevProps: IProps) {
+    // Every time the data props is updated, insert the data into the Perspective table
+    if (this.table && this.props.data !== prevProps.data) {
+      // Create a set to store unique keys based on 'stock' and 'timestamp'
+      const uniqueKeys = new Set<string>();
+  
+      // Filter the incoming data to include only unique entries
+      const filteredData = this.props.data.filter((el) => {
+        const key = `${el.stock}_${el.timestamp}`;
+        if (!uniqueKeys.has(key)) {
+          uniqueKeys.add(key);
+          return true;
+        }
+        return false;
+      });
+  
+      // Format the data and update the Perspective table
+      this.table.update(filteredData.map((el: any) => ({
+        stock: el.stock,
+        top_ask_price: el.top_ask && el.top_ask.price || 0,
+        top_bid_price: el.top_bid && el.top_bid.price || 0,
+        timestamp: el.timestamp,
+      })));
     }
   }
-}
+  
 
-export default Graph;
+export default Graph;
\ No newline at end of file
-- 
2.39.2

